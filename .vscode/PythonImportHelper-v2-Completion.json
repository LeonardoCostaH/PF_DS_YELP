[
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "geopandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "geopandas",
        "description": "geopandas",
        "detail": "geopandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "LinearSegmentedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "mapa_scatterplot_light",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def mapa_scatterplot_light(title, data, size=10):\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sig_estados.plot(ax=ax, color=\"white\", edgecolor=\"black\", alpha=0.5, markersize=10)\n    data.plot(ax=ax, color=\"black\", edgecolor=\"none\", alpha=0.1, markersize=size)\n    ax.set_xlim([-130, -63])\n    ax.set_ylim([20, 55])\n    ax.set_facecolor('white')\n    plt.xticks(fontsize=8, color=\"black\")\n    plt.yticks(fontsize=8, color=\"black\")\n    plt.title(title, fontsize=12, loc='right', color=\"black\")",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "mapa_scatterplot_dark",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def mapa_scatterplot_dark(title, data, size=10):\n    fig, ax = plt.subplots(figsize=(10, 10))\n    ax.grid(color='darkgrey', linewidth=0.25)\n    sig_estados.plot(ax=ax, color=\"none\", edgecolor=\"white\", alpha=0.25, markersize=10)\n    data.plot(ax=ax, color=\"white\", edgecolor=\"none\", alpha=0.1, markersize=size)\n    ax.set_xlim([-130, -63])\n    ax.set_ylim([20, 55])\n    ax.set_facecolor(color_palette[\"github_backborund\"])\n    plt.xticks(fontsize=8, color=\"white\")\n    plt.yticks(fontsize=8, color=\"white\")",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "map_technology",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def map_technology(prov_data, loc_data, technology, max_color, min_color):\n    cmap = LinearSegmentedColormap.from_list('custom_colormap', [max_color, min_color], N=256)\n    vmin = prov_data[technology].min()\n    vmax = prov_data[technology].max()\n    fig, ax = plt.subplots(figsize=(8, 8))\n    prov_data.plot(column=technology, legend=False, ax=ax, edgecolor='black', linewidth=0.5, cmap=cmap, vmin=vmin, vmax=vmax)\n    loc_data[f\"scaled_{technology}\"] = (loc_data[technology] - loc_data[technology].min()) / (loc_data[technology].max() - loc_data[technology].min()) * (50 - 5) + 5\n    loc_data.plot(ax=ax, color=\"white\", edgecolor=\"black\", alpha=0.5, markersize=loc_data[f\"scaled_{technology}\"])\n    plt.gcf().set_facecolor(\"white\") # Background\n    plt.gca().set_facecolor(\"white\") # Background",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "missing_values_heatmap",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def missing_values_heatmap(dataframe, title):\n    # Create and configurate heatmap\n    sns.heatmap(data=dataframe.isnull().T, cbar=False, annot_kws={\"color\": \"red\"}, cmap=sns.color_palette([\"#0D1117\", white]))\n    plt.gcf().set_facecolor(\"#0D1117\") # Background\n    plt.gca().set_facecolor(\"#0D1117\") # Background\n    plt.title(f\"{title} missing values\", fontsize=10, loc='left', color=white) # Title\n    plt.yticks(fontsize=9, color=white) # Y axis\n    plt.xticks([]) # X axis\n    # Save and show\n    plt.savefig(f\"gallery/{title}.png\", format='png', dpi=300, bbox_inches='tight')",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "histogram",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def histogram(column, title):\n    # Create histogram\n    plt.figure(figsize=(10, 6))\n    plt.gcf().set_facecolor(\"#0D1117\") # Background\n    plt.gca().set_facecolor(\"#0D1117\") # Background\n    plt.hist(column, bins=len(column.value_counts()), color=white, edgecolor=white)\n    # Title\n    plt.title(title, fontsize=10, loc='right', color=white)\n    # X axis\n    plt.xticks(fontsize=9, color=white) ",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "barplot",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def barplot(data, title):\n    plt.figure(figsize=(10, 6))\n    plt.gcf().set_facecolor(\"#0D1117\") # Background\n    plt.gca().set_facecolor(\"#0D1117\") # Background\n    data.plot(kind='bar', color=white, edgecolor=white)\n    # Title\n    plt.title(title, fontsize=10, loc='right', color=white)\n    # X axis\n    plt.xticks(fontsize=9, color=white) \n    plt.xlabel('')",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "scatter_plot",
        "kind": 2,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "def scatter_plot(data, title):\n    red_color = \"#E63946\"\n    back_color = \"#0D1117\"\n    sns.set_theme(style=\"whitegrid\")\n    plt.figure(figsize=(10, 6))\n    plt.gca().set_facecolor(back_color)\n    sns.scatterplot(x='date', y='price', data=data, color=\"white\", size=\"score\", legend=False, edgecolor='none', alpha=0.4, sizes=(5,250))\n    #sns.scatterplot(x='date', y='price', data=edata_white, color=red_color, size='count', legend=False, edgecolor='none', alpha=0.4, sizes=(5,250))\n    plt.xlabel('')\n    plt.ylabel('')",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "color_palette",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "color_palette = {\n    \"white\": \"#FFFFFF\",\n    \"black\": \"#000000\",\n    \"github_backborund\": \"#0D1117\"}\nsns.set_theme(style=\"whitegrid\")\n# Importar y transformar sig data\nsig_estados = gpd.read_file(\"data/sig/Estados Unidos/Estados/Estados_Unidos_Estados.shp\")\nsig_ciudades = gpd.read_file(\"data/sig/Estados Unidos/Ciudades/Estados_Unidos_Poblaciones.shp\")\nsig_ciudades.rename(columns={\"NOMBRE\": \"city\"}, inplace=True)\n# Importar y transformar sig data",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_estados",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_estados = gpd.read_file(\"data/sig/Estados Unidos/Estados/Estados_Unidos_Estados.shp\")\nsig_ciudades = gpd.read_file(\"data/sig/Estados Unidos/Ciudades/Estados_Unidos_Poblaciones.shp\")\nsig_ciudades.rename(columns={\"NOMBRE\": \"city\"}, inplace=True)\n# Importar y transformar sig data\nsig_provincias = gpd.read_file(\"data/sig/Argentina/provincia.shp\")\nsig_localidades = gpd.read_file(\"data/sig/Argentina/localidad_bahra.shp\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Ciudad Autónoma de Buenos Aires\", \"Capital Federal\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Tierra del Fuego, Antártida e Islas del Atlántico Sur\", \"Tierra Del Fuego\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_ciudades",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_ciudades = gpd.read_file(\"data/sig/Estados Unidos/Ciudades/Estados_Unidos_Poblaciones.shp\")\nsig_ciudades.rename(columns={\"NOMBRE\": \"city\"}, inplace=True)\n# Importar y transformar sig data\nsig_provincias = gpd.read_file(\"data/sig/Argentina/provincia.shp\")\nsig_localidades = gpd.read_file(\"data/sig/Argentina/localidad_bahra.shp\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Ciudad Autónoma de Buenos Aires\", \"Capital Federal\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Tierra del Fuego, Antártida e Islas del Atlántico Sur\", \"Tierra Del Fuego\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)\nsig_provincias.rename(columns={\"nam\": \"Provincia\"}, inplace=True)",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_provincias",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_provincias = gpd.read_file(\"data/sig/Argentina/provincia.shp\")\nsig_localidades = gpd.read_file(\"data/sig/Argentina/localidad_bahra.shp\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Ciudad Autónoma de Buenos Aires\", \"Capital Federal\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Tierra del Fuego, Antártida e Islas del Atlántico Sur\", \"Tierra Del Fuego\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)\nsig_provincias.rename(columns={\"nam\": \"Provincia\"}, inplace=True)\n# Color palete\nwhite = \"#FFFFFF\"\nblack = \"#000000\"",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_localidades",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_localidades = gpd.read_file(\"data/sig/Argentina/localidad_bahra.shp\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Ciudad Autónoma de Buenos Aires\", \"Capital Federal\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Tierra del Fuego, Antártida e Islas del Atlántico Sur\", \"Tierra Del Fuego\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)\nsig_provincias.rename(columns={\"nam\": \"Provincia\"}, inplace=True)\n# Color palete\nwhite = \"#FFFFFF\"\nblack = \"#000000\"\nsns.set_theme(style=\"whitegrid\")",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_provincias[\"nam\"]",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Ciudad Autónoma de Buenos Aires\", \"Capital Federal\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Tierra del Fuego, Antártida e Islas del Atlántico Sur\", \"Tierra Del Fuego\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)\nsig_provincias.rename(columns={\"nam\": \"Provincia\"}, inplace=True)\n# Color palete\nwhite = \"#FFFFFF\"\nblack = \"#000000\"\nsns.set_theme(style=\"whitegrid\")\ndef mapa_scatterplot_light(title, data, size=10):",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_provincias[\"nam\"]",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Tierra del Fuego, Antártida e Islas del Atlántico Sur\", \"Tierra Del Fuego\")\nsig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)\nsig_provincias.rename(columns={\"nam\": \"Provincia\"}, inplace=True)\n# Color palete\nwhite = \"#FFFFFF\"\nblack = \"#000000\"\nsns.set_theme(style=\"whitegrid\")\ndef mapa_scatterplot_light(title, data, size=10):\n    fig, ax = plt.subplots(figsize=(10, 10))",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "sig_provincias[\"nam\"]",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "sig_provincias[\"nam\"] = sig_provincias[\"nam\"].str.replace(\"Santiago del Estero\", \"Santiago Del Estero\")\nsig_provincias.drop(columns=[\"gid\", \"entidad\", \"fna\", \"gna\", \"in1\", \"fdc\", \"sag\"], inplace=True)\nsig_provincias.rename(columns={\"nam\": \"Provincia\"}, inplace=True)\n# Color palete\nwhite = \"#FFFFFF\"\nblack = \"#000000\"\nsns.set_theme(style=\"whitegrid\")\ndef mapa_scatterplot_light(title, data, size=10):\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sig_estados.plot(ax=ax, color=\"white\", edgecolor=\"black\", alpha=0.5, markersize=10)",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "white",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "white = \"#FFFFFF\"\nblack = \"#000000\"\nsns.set_theme(style=\"whitegrid\")\ndef mapa_scatterplot_light(title, data, size=10):\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sig_estados.plot(ax=ax, color=\"white\", edgecolor=\"black\", alpha=0.5, markersize=10)\n    data.plot(ax=ax, color=\"black\", edgecolor=\"none\", alpha=0.1, markersize=size)\n    ax.set_xlim([-130, -63])\n    ax.set_ylim([20, 55])\n    ax.set_facecolor('white')",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    },
    {
        "label": "black",
        "kind": 5,
        "importPath": "lib.personalised_graphics",
        "description": "lib.personalised_graphics",
        "peekOfCode": "black = \"#000000\"\nsns.set_theme(style=\"whitegrid\")\ndef mapa_scatterplot_light(title, data, size=10):\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sig_estados.plot(ax=ax, color=\"white\", edgecolor=\"black\", alpha=0.5, markersize=10)\n    data.plot(ax=ax, color=\"black\", edgecolor=\"none\", alpha=0.1, markersize=size)\n    ax.set_xlim([-130, -63])\n    ax.set_ylim([20, 55])\n    ax.set_facecolor('white')\n    plt.xticks(fontsize=8, color=\"black\")",
        "detail": "lib.personalised_graphics",
        "documentation": {}
    }
]